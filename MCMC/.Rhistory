)
j <- j+1
}
dens_df$data <- factor(dens_df$data, levels = paste0("Data ", 1:4))
dens_df$quantity <- factor("Density")
dens_plots <- ggplot(dens_df, aes(x=x,y = density)) +
geom_line() +
xlim(c(-20, 20)) +
facet_grid(
quantity ~ data,
scales = "free_y",
labeller = label_wrap_gen(multi_line=FALSE)
) +
theme_bw() +
theme(text = element_text(size = 20))
dens_plots
model_levels <- c("stan", "jags-full", "jags-marg-inbuilt", "jags-marg",
"jags-full-restricted")
quantity_levels <- c("Time per min Effective Sample", "Computation Time",
"Min Effective Sample Size", "Rhat")
result <- readRDS(here::here("Results","two-component-result-new.rds"))
result$model <- factor(result$model, levels = model_levels)
result$data <- factor(result$data, levels = as.character(c(1,3,2,4)),
labels = paste0("Data ", dens))
result$quantity <- factor(result$quantity, levels = quantity_levels)
result$trial <- factor(result$trial)
result$value <- as.numeric(result$value)
log_plot <- result %>%
filter(quantity != "Rhat") %>%
ggplot(aes(x = model, y = value, group = model)) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_grid(quantity ~ data, scales = "free") +
scale_y_log10(
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))
) +
scale_x_discrete(labels = NULL) +
labs(y = "") +
theme_bw() +
theme(
strip.placement = "outside",
text = element_text(size = 20),
strip.text.x = element_blank(),
axis.title.x = element_blank()
)
log_plot
rhat_plot <- result %>%
filter(quantity == "Rhat") %>%
ggplot(aes(x = model, y = value, group = model)) +
geom_point() +
geom_hline(yintercept = 1.1) +
facet_grid(
quantity ~ data,
scales = "free_y",
labeller = label_wrap_gen(multi_line=FALSE)
) +
scale_x_discrete(labels = addline_format(model_levels)) +
scale_y_continuous(labels = number_format(accuracy = 0.001)) +
theme_bw() +
theme(
strip.placement = "outside",
text = element_text(size=20),
strip.text.x = element_blank()
)
rhat_plot
pdf("two-component-mixture-result-final-log.pdf", width = 18, height = 20)
grid.arrange(dens_plots, log_plot, rhat_plot, ncol = 1,
layout_matrix = cbind(c(1, 2, 2, 2, 3)))
dev.off()
plot <- ggplot(filter(result, quantity != "Rhat"),
aes(x = model, y = value, group = model)) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
)
plot
dens_plots2 <- ggplot(dens_df, aes(x = x, y = density)) +
geom_line() +
facet_wrap(quantity~data, scales='free',ncol=4) +
xlim(c(-20, 20)) +
theme_bw() +
theme(text = element_text(size=20))
dens_plots2
rhat_plot2 <- result %>%
filter(quantity == "Rhat") %>%
ggplot(aes(x = model, y = value, group = model)) +
geom_point() +
geom_hline(yintercept = 1.1) +
facet_wrap(quantity ~ data, scales='free', ncol=4) +
theme_bw() +
theme(text = element_text(size = 20)) +
scale_x_discrete(labels=addline_format(model_levels))
rhat_plot2
pdf("two-component-mixture-result-final.pdf", width = 18, height = 20)
grid.arrange(
dens_plots2 + scale_y_continuous(labels = number_format(accuracy = 0.001),
limits = c(0,0.15)),
plot,
rhat_plot2 + theme(panel.spacing = unit(1, "lines")),
ncol = 1, layout_matrix = cbind(c(1,2,2,2,3)))
#dev.off()
dens_df
dens_f <- function(n) {
mixing_p_n <- mixing_p[[n]]
mu_n <- mu[[n]]
val <-
mixing_p_n[[1]] * dnorm(sample_pts, mean = mu_n[[1]], sd = sigma[[1]]) +
mixing_p_n[[2]] * dnorm(sample_pts, mean = mu_n[[2]], sd = sigma[[2]])
return(val)
}
dens <- c(1,3,2,4)
dens_list <- lapply(dens, dens_f)
dens_df <- data.frame()
# swap data 3 and 2 for consistent ordering
j<- 1
for (i in dens) {
dens_df <- rbind(
dens_df,
data.frame(
density = dens_list[[i]],
data = rep(paste("Data", j), length(sample_pts)),
x = sample_pts
)
)
j <- j+1
}
dens_df$data <- factor(dens_df$data, levels = paste0("Data ", 1:4))
dens_df$quantity <- factor("Density")
dens_plots <- ggplot(dens_df, aes(x=x,y = density)) +
geom_line() +
xlim(c(-20, 20)) +
facet_grid(
quantity ~ data,
scales = "free_y",
labeller = label_wrap_gen(multi_line=FALSE)
) +
theme_bw() +
theme(text = element_text(size = 20))
dens_plots
dens_plots <- ggplot(dens_df, aes(x=x,y = density)) +
geom_line() +
xlim(c(-20, 20)) +
facet_grid(
quantity ~ data,
scales = "free_y",
labeller = label_wrap_gen(multi_line=FALSE)
) +
theme_bw() +
theme(text = element_text(size = 20))
dens_plots
dens_list
dens_f <- function(n) {
mixing_p_n <- mixing_p[[n]]
mu_n <- mu[[n]]
val <-
mixing_p_n[[1]] * dnorm(sample_pts, mean = mu_n[[1]], sd = sigma[[1]]) +
mixing_p_n[[2]] * dnorm(sample_pts, mean = mu_n[[2]], sd = sigma[[2]])
return(val)
}
dens <- c(1,3,2,4)
dens_list <- lapply(dens, dens_f)
dens_df <- data.frame()
# swap data 3 and 2 for consistent ordering
j<- 1
for (i in dens) {
dens_df <- rbind(
dens_df,
data.frame(
density = dens_list[[i]],
data = rep(paste("Data", i), length(sample_pts)),
x = sample_pts
)
)
j <- j+1
}
dens_df$data <- factor(dens_df$data, levels = paste0("Data ", 1:4))
dens_df$quantity <- factor("Density")
dens_plots <- ggplot(dens_df, aes(x=x,y = density)) +
geom_line() +
xlim(c(-20, 20)) +
facet_grid(
quantity ~ data,
scales = "free_y",
labeller = label_wrap_gen(multi_line=FALSE)
) +
theme_bw() +
theme(text = element_text(size = 20))
dens_plots
dens_plots2 <- ggplot(dens_df, aes(x = x, y = density)) +
geom_line() +
facet_wrap(quantity~data, scales='free',ncol=4) +
xlim(c(-20, 20)) +
theme_bw() +
theme(text = element_text(size=20))
dens_plots2
pdf("two-component-mixture-result-final.pdf", width = 18, height = 20)
grid.arrange(
dens_plots2 + scale_y_continuous(labels = number_format(accuracy = 0.001),
limits = c(0,0.15)),
plot,
rhat_plot2 + theme(panel.spacing = unit(1, "lines")),
ncol = 1, layout_matrix = cbind(c(1,2,2,2,3)))
#dev.off()
pdf("two-component-mixture-result-final-log.pdf", width = 18, height = 20)
grid.arrange(dens_plots, log_plot, rhat_plot, ncol = 1,
layout_matrix = cbind(c(1, 2, 2, 2, 3)))
dev.off()
getwd()
# loading all dependencies
library("rater")
require(rjags)
require(coda)
require(here)
require(rstan)
require(posterior)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
NT <- 5 # number of trials
set.seed(123)
# run jags and stan and record the quantities of interest
# quantities of interest:
# *time/min ess
# * min ess
# * time
# * Rhat
# the quantities will be stored in a dataframe with the following columns
# * model
# * quantity
# * trial
# * value
result <- data.frame()
# apart from the quantities of interest, create lists
# for model objects
stan_mod_list <- list()
jags_full_mod_list <- list()
jags_marg_mod_list <- list()
jags_full_restricted_mod_list <- list()
# functions to restrict the set of samplers that jags can use
all_sampler <- function(){
set.factory("bugs::BinomSlice", TRUE, type="sampler")
set.factory("bugs::RW1", TRUE, type="sampler")
set.factory("bugs::Censored", TRUE, type="sampler")
set.factory("bugs::Sum", TRUE, type="sampler")
set.factory("bugs::DSum", TRUE, type="sampler")
set.factory("bugs::Conjugate", TRUE, type="sampler")
set.factory("bugs::Dirichlet", TRUE, type="sampler")
set.factory("bugs::MNormal", TRUE, type="sampler")
set.factory("base::Finite", TRUE, type="sampler")
set.factory("base::Slice", TRUE, type="sampler")
}
res_sampler <- function(){
set.factory("bugs::BinomSlice", FALSE, type="sampler")
set.factory("bugs::RW1", FALSE, type="sampler")
set.factory("bugs::Censored", FALSE, type="sampler")
set.factory("bugs::Sum", FALSE, type="sampler")
set.factory("bugs::DSum", FALSE, type="sampler")
set.factory("bugs::Conjugate", FALSE, type="sampler")
set.factory("bugs::Dirichlet", TRUE, type="sampler")
set.factory("bugs::MNormal", FALSE, type="sampler")
set.factory("base::Finite", FALSE, type="sampler")
set.factory("base::Slice", TRUE, type="sampler")
}
for(t in 1:NT){
# simulating data
#' Simulate incomplete data from the Dawid-Skene model.
#'
#' @param I The number of ratings.
#' @param J The number of raters.
#' @param K The number of categories.
#' @param n_ratings The total number of ratings in the simulated data.
#' @param pi The pi parameter
#' @param theta The theta parameter
#'
#' @return A list with two components:
#'   * z: The latent class of each item;
#'   * data: The simulated data in a long format.
#'
simulate_ds_incomplete <- function(I, J, K,
n_ratings,
pi, theta) {
# We need there to be at least one rating per item.
stopifnot(n_ratings > I)
n_extra_ratings <- n_ratings - I
z <- sample(1:K, size = I, prob = pi, replace = TRUE)
p <- rep(1 / I, I)
n_extra_ratings_per_item <- rmultinom(1, n_extra_ratings, p)
# Add in the minimal number of ratings which are distributed perfectly
# uniformly.
n_ratings_per_item <- n_extra_ratings_per_item + 1
# NB: This is in ragged list form
rater_indexes <- lapply(n_ratings_per_item, function(x) {
# We currently sample from the raters uniformly - this could be extended.
sample(1:J, size = x, replace = TRUE)
})
# Use rater_indexes as a placeholder.
item_indexes <- rep(1:I, lengths(rater_indexes))
out <- cbind(item_indexes, unlist(rater_indexes), 0)
for (i in 1:nrow(out)) {
out[i, 3] <- sample(1:K, 1, prob = theta[out[i, 2], z[[out[i, 1]]], ])
}
colnames(out) <- c("item", "rater", "rating")
list(
z = z,
data = out
)
}
#' Build the theta parameter of the Dawid-Skene model
#'
#' @param on_diag The on diagonal entries of each matrix
#' @param J The number of raters (number of matrices)
#' @param K The number of categories (the dimensions of each matrix)
#'
#' @return A c(J, K, K) array; the theta parameter
#'
build_theta <- function(on_diag, J, K) {
stopifnot(length(on_diag) == 1)
stopifnot(is.numeric(on_diag))
theta <- array(0, dim = c(J, K, K))
for (j in 1:J) {
theta[j, ,] <- array((1 - on_diag) / (K - 1))
for (k in 1:K) {
theta[j, k, k] <- on_diag
}
}
theta
}
I <- 100
K <- 5
J <- 5
n_ratings <- N <- 500
pi <- rep(1 / K, K)
on_diag <- 0.7
theta <- build_theta(0.7, J, K)
sim <- simulate_ds_incomplete(I, J, K, n_ratings, pi, theta)
# setup for models
Nn <- 8
ii <- sim$data[,1] # item index for annotation n
jj <- sim$data[,2] # annotator for annotation n
y <- sim$data[,3] # annotation for observation n
alpha <- rep(3,K)
beta <- matrix(ncol = K, nrow = K)
p <- 0.6
for (i in 1:K){
for (j in 1:K){
if(i ==j){
beta[i,j] <- Nn*p
}
else {
beta[i,j] <- Nn*(1-p)/(K-1)
}
}
}
beta_slice <- beta
beta <- array(dim = c(J, K, K))
for (j in 1:J) {
beta[j, , ] <- beta_slice
}
data_jags <-list(N=N, y=y, K=K, I=I, J=J, ii=ii, jj=jj)
data_stan <- list(N=N, y=y, K=K, I=I, J=J, ii=ii, jj=jj, beta=beta, alpha=alpha)
#iterations <- 6000
iterations <- 3000
burnin <- floor(iterations/2)
#chains <- 3
chains <- 4
parameters = c("pi", "theta","z")
pi_init <- rep(1/K, K)
theta_init <- array(0.2 / (K - 1), c(J, K, K))
for (j in 1:J) {
diag(theta_init[j, ,]) <- 0.8
}
# stan
# record stan computation time
time <- system.time(model_fit <-
suppressMessages(
stan(file = here("Models","Dawid-Skene-original.stan"),
data = data_stan, iter=iterations,
init = function(n) list(theta = theta_init, pi = pi_init),
chain=chains, warmup=burnin)))["elapsed"]
# using sampling
# temp <- stan_model(file =  here("Models","DawidSkene.stan"))
#
# time <- system.time(model_fit <-
#                       suppressMessages(
#                         sampling(temp,
#                                  data = data_stan, iter=iterations,
#                                  init = function(n) list(theta = theta_init, pi = pi_init),
#                                  chain=chains, warmup=burnin)))["elapsed"]
#time <- system.time(model.rater <- rater(sim$data, "dawid_skene"))["elapsed"]
# record stan model
#model_fit <- get_stanfit(model.rater)
#time <- system.time(model.rater <- rater(sim$data, "dawid_skene"))["elapsed"]
result <- rbind(result, c("stan", "Computation Time", t, time))
# record stan model
stan_mod_list[[t]] <- model_fit
stan_summary <- summarise_draws(as_draws_array(model_fit))
# record stan min ess(130 is the number of continuous pars)
ess <- min(stan_summary$ess_bulk[0:130])
result <- rbind(result, c("stan", "Min Effective Sample Size", t, ess))
# record stan timeper min ess
timeperess <-  time/ess
result <- rbind(result, c("stan", "Time per min Effective Sample", t, timeperess))
# record stan rhat
rhat <- max(stan_summary$rhat[0:130])
result <- rbind(result, c("stan", "Rhat", t, rhat))
# unrestricted set of samplers for jags
all_sampler()
# jags-full
# record jags-full computation time
t1 <- system.time(model.fit <- jags.model(file =here("Models","Dawid-Skene.txt"),
data=data_jags, n.chains=chains))["elapsed"]
t2 <-  system.time(model.samples <- coda.samples(model.fit, parameters,
n.iter=iterations))["elapsed"]
time <- t1 + t2
result <- rbind(result, c("jags-full", "Computation Time", t, time))
# record jags-full model
jags_full_mod_list[[t]] <- model.samples
jags_summary <- summarise_draws(as_draws_array(model.samples))
# record jags-full min ess
ess <- min(jags_summary$ess_bulk[0:130])
result <- rbind(result, c("jags-full", "Min Effective Sample Size", t, ess))
# record jags-full timeper min ess
timeperess <-  time/ess
result <- rbind(result, c("jags-full", "Time per min Effective Sample", t, timeperess))
# record jags-full rhat
rhat <- max(jags_summary$rhat[0:130])
result <- rbind(result, c("jags-full", "Rhat", t, rhat))
# jags-marg
# record jags-marg computation time
set.seed(t)
t1 <- system.time(model.fit <- jags.model(file =here("Models","Dawid-Skene-marginalised.txt"),
data=data_jags, n.chains=chains))["elapsed"]
t2 <- system.time(model.samples <- coda.samples(model.fit, parameters,
n.iter=iterations))["elapsed"]
time <- t1 + t2
result <- rbind(result, c("jags-marg", "Computation Time", t, time))
# record jags-marg model
jags_marg_mod_list[[t]] <- model.samples
jags_summary <- summarise_draws(as_draws_array(model.samples))
# record jags-marg min ess
ess <- min(jags_summary$ess_bulk[0:130])
result <- rbind(result, c("jags-marg", "Min Effective Sample Size", t, ess))
# record jags-marg timeper min ess
timeperess <-  time/ess
result <- rbind(result, c("jags-marg", "Time per min Effective Sample", t, timeperess))
# record jags-marg rhat
rhat <- max(jags_summary$rhat[0:130])
result <- rbind(result, c("jags-marg", "Rhat", t, rhat))
# restructed set of samplers for jags
res_sampler()
# jags-full
# record jags-full computation time
t1 <- system.time(model.fit <- jags.model(file =here("Models","Dawid-Skene.txt"),
data=data_jags, n.chains=chains))["elapsed"]
t2 <-  system.time(model.samples <- coda.samples(model.fit, parameters,
n.iter=iterations))["elapsed"]
time <- t1 + t2
result <- rbind(result, c("jags-full-restricted", "Computation Time", t, time))
# record jags-full model
jags_full_restricted_mod_list[[t]] <- model.samples
jags_summary <- summarise_draws(as_draws_array(model.samples))
# record jags-full min ess
ess <- min(jags_summary$ess_bulk[0:130])
result <- rbind(result, c("jags-full-restricted", "Min Effective Sample Size", t, ess))
# record jags-full timeper min ess
timeperess <-  time/ess
result <- rbind(result, c("jags-full-restricted", "Time per min Effective Sample", t, timeperess))
# record jags-full rhat
rhat <- max(jags_summary$rhat[0:130])
result <- rbind(result, c("jags-full-restricted", "Rhat", t, rhat))
}
colnames(result) <- c("model", "quantity", "trial", "value")
# save results
saveRDS(result, file = paste(here("Results"), "/Dawid-Skene-result-original-Final.rds", sep=""))
library(egg)
library(dplyr)
library(tidyverse)
library(here)
# helper function for string wrapping
swr <- function(string, nwrap=20) {
paste(strwrap(string, width=nwrap), collapse="\n")
}
swr <- Vectorize(swr)
addline_format <- function(x,...){
gsub('-','-\n',x)
}
result <- readRDS(here("Results","Dawid-Skene-result-original-final.rds"))
result$model <- factor(result$model, levels = c("stan", "jags-full", "jags-marg", "jags-full-restricted"))
result$quantity <- swr(result$quantity)
result$quantity <- factor(result$quantity, levels = c(swr("Time per min Effective Sample"), "Computation Time",swr( "Min Effective Sample Size"), "Rhat"))
result$trial <- factor(result$trial)
result$value <- as.numeric(result$value)
result
plot1 <- ggplot(subset(result, quantity != "Rhat"), aes(x=model, y=value, group=model)) +  geom_boxplot() + facet_grid(quantity ~., scales='free') + theme_bw() + theme(text = element_text(size=20)) + theme(axis.title.x = element_blank()) + geom_boxplot(color="black", fill="gray", alpha=0.5) +scale_x_discrete(labels = NULL)
plot2 <- ggplot(subset(result, quantity == "Rhat"), aes(x=model, y=value, group=model)) +  geom_point() + theme_bw() + facet_grid(quantity ~., scales='free') + theme(text = element_text(size=20))+geom_hline(yintercept = 1.1) + scale_x_discrete(labels=addline_format(c("stan", "jags-full", "jags-marg", "jags-full-restricted")))
pdf("Dawid-Skene-result-original-final1.pdf", width = 8, height = 12)
grid.arrange(plot1, plot2, ncol=1 , layout_matrix = cbind(c(1,1,1,2)))
#dev.off()
result
result
summary(result)
result[result$model=="stan" && result$quantity == "Time per min\nEffective Sample",]
result[result$model==result$model[1] && result$quantity == result$quantity[1],]
result$model[1]
result[result$model==result$model[1] & result$quantity == result$quantity[1],]
result[result$model==result$model[5] & result$quantity == result$quantity[1],]
result[result$model==result$model[1] & result$quantity == result$quantity[3],]
result[result$model==result$model[5] & result$quantity == result$quantity[3],]
