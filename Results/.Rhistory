start <- start + tot_entry
}
writeLines('\n')
}
# loading all dependencies
library("rater")
require(rjags)
require(coda)
require(here)
require(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
load(file = here("data","anesthesia.rda"))
NT <- 5 # number of trials
set.seed(123)
#rater(anesthesia, dawid_skene())
# using the rater package to run stan
data("anesthesia", package = "rater")
# some setup
N <- nrow(anesthesia) # total number of annotations
K <- 4 # number of annotation categories
I <- 45 # number of items
J <- 5 # number of annotators
ii <- anesthesia$item # item index for annotation n
jj <- anesthesia$rater # annotator for annotation n
y <- anesthesia$rating # annotation for observation n
data_jags <- data_stan <- list(N=N, y=y, K=K, I=I, J=J, ii=ii, jj=jj)
iterations <- 6000
burnin <- floor(iterations/2)
chains <- 3
parameters = c("pi", "theta","z")
# run jags and stan and record the quantities of interest
# quantities of interest:
# *time/min ess
# * min ess
# * time
# * Rhat
# the quantities will be stored in a dataframe with the following columns
# * model
# * quantity
# * trial
# * value
result <- data.frame()
# apart from the quantities of interest, create lists
# for model objects
stan_mod_list <- list()
jags_full_mod_list <- list()
jags_marg_mod_list <- list()
for(t in 1:NT){
# stan
# record stan computation time
time <- system.time(model.rater <- rater(anesthesia, dawid_skene()))["elapsed"]
result <- rbind(result, c("stan", "Computation Time", t, time))
# record stan model
model_fit <- get_stanfit(model.rater)
stan_mod_list[[t]] <- model_fit
# record stan min ess(84 is the number of continuous pars)
ess <- min(summary(model_fit)$summary[,"n_eff"][0:84])
result <- rbind(result, c("stan", "Min Effective Sample Size", t, ess))
# record stan timeper min ess
timeperess <-  time/ess
result <- rbind(result, c("stan", "Time per min Effective Sample", t, timeperess))
# record stan rhat
rhat <- max(mcmc_diagnostics(model.rater)[,"Rhat"])
result <- rbind(result, c("stan", "Rhat", t, rhat))
# jags-full
# record jags-full computation time
time <-
system.time(model.fit <- jags.model(file =here("Models","Dawid-Skene.txt"),
data=data_jags, n.chains=chains))["elapsed"]
+ system.time(model.samples <- coda.samples(model.fit, parameters,
n.iter=iterations))["elapsed"]
result <- rbind(result, c("jags-full", "Computation Time", t, time))
# record jags-full model
jags_full_mod_list[[t]] <- model.samples
# record jags-full min ess
ess <- min(effectiveSize(model.samples)[0:84])
result <- rbind(result, c("jags-full", "Min Effective Sample Size", t, ess))
# record jags-full timeper min ess
timeperess <-  time/ess
result <- rbind(result, c("jags-full", "Time per min Effective Sample", t, timeperess))
# record jags-full rhat
disc <- gelman.diag(model.samples, multivariate = FALSE)
rhat <- max(disc$psrf[1:84,"Upper C.I."])
result <- rbind(result, c("jags-full", "Rhat", t, rhat))
# jags-marg
# record jags-marg computation time
time <-
system.time(model.fit <- jags.model(file =here("Models","Dawid-Skene-marginalised.txt"),
data=data_jags, n.chains=chains))["elapsed"]
+ system.time(model.samples <- coda.samples(model.fit, parameters,
n.iter=iterations))["elapsed"]
result <- rbind(result, c("jags-marg", "Computation Time", t, time))
# record jags-marg model
jags_marg_mod_list[[t]] <- model.samples
# record jags-marg min ess
ess <- min(effectiveSize(model.samples)[0:84])
result <- rbind(result, c("jags-marg", "Min Effective Sample Size", t, ess))
# record jags-marg timeper min ess
timeperess <-  time/ess
result <- rbind(result, c("jags-marg", "Time per min Effective Sample", t, timeperess))
# record jags-marg rhat
disc <- gelman.diag(model.samples, multivariate = FALSE)
rhat <- max(disc$psrf[1:84,"Upper C.I."])
result <- rbind(result, c("jags-marg", "Rhat", t, rhat))
}
colnames(result) <- c("model", "quantity", "trial", "value")
# save results
saveRDS(result, file = paste(here("Results"), "/Dawid-Skene-result.rds", sep=""))
library(egg)
library(dplyr)
library(tidyverse)
# helper function for string wrapping
swr <- function(string, nwrap=20) {
paste(strwrap(string, width=nwrap), collapse="\n")
}
swr <- Vectorize(swr)
result <- readRDS(here("Results","Dawid-Skene-result.rds"))
result$model <- factor(result$model, levels = c("stan", "jags-full", "jags-marg"))
result$quantity <- swr(result$quantity)
result$quantity <- factor(result$quantity, levels = c(swr("Time per min Effective Sample"), "Computation Time",swr( "Min Effective Sample Size"), "Rhat"))
result$trial <- factor(result$trial)
result$value <- as.numeric(result$value)
result
plot1 <- ggplot(subset(result, quantity != "Rhat"), aes(x=model, y=value, group=model)) +  geom_boxplot() + facet_grid(quantity ~., scales='free') + theme_bw() + theme(text = element_text(size=20))#+ scale_fill_brewer(palette = "Set3")
plot2 <- ggplot(subset(result, quantity == "Rhat"), aes(x=model, y=value, group=model)) +  geom_point() + theme_bw() + facet_grid(quantity ~., scales='free') + theme(text = element_text(size=20))+geom_hline(yintercept = 1.1)#+ scale_color_brewer(palette="Set3") +geom_hline(yintercept = 1.1)
#pdf("Dawid-Skene-anesthesia-result.pdf", width = 8, height = 12)
grid.arrange(plot1, plot2, ncol=1 , layout_matrix = cbind(c(1,1,1,2)))
#dev.off()
#pdf("Dawid-Skene-anesthesia-result.pdf", width = 8, height = 12)
grid.arrange(plot1, plot2, ncol=1 , layout_matrix = cbind(c(1,1,1,2)))
#dev.off()
getwd()
# Setup
library(egg)
library(dplyr)
library(tidyverse)
library(scales)
addline_format <- function(x,...){
gsub('-','-\n',x)
}
sample_pts <- seq(-20, 20, by = 0.1)
mixing_p <- list(
c(0.50, 0.50),
c(0.50, 0.50),
c(0.70, 0.30),
c(0.70, 0.30)
)
mu <- list(
c(5, -5),
c(2.5, -2.5),
c(5, -5),
c(2.5, -2.5)
)
prec <- c(1 / 4, 1 / 4)
sigma <- sqrt(1 / prec)
dens_f <- function(n) {
mixing_p_n <- mixing_p_n[[n]]
mu_n <- mixing_p_n[[n]]
val <-
mixing_p_n[[1]] * dnorm(sample_pts, mean = mu_n[[1]], sd = sigma[[1]]) +
mixing_p_n[[2]] * dnorm(sample_pts, mean = mu_n[[2]], sd = sigma[[2]])
val
}
dens <- 1:4
dens_list <- lapply(dens, dens_f)
dens_f <- function(n) {
val <-
mixing_p[[1]] * dnorm(sample_pts, mean = mu_n[[1]], sd = sigma[[1]]) +
mixing_p[[2]] * dnorm(sample_pts, mean = mu_n[[2]], sd = sigma[[2]])
return(val)
}
dens <- 1:4
dens_list <- lapply(dens, dens_f)
dens_f <- function(n) {
val <-
mixing_p[[1]] * dnorm(sample_pts, mean = mu[[1]], sd = sigma[[1]]) +
mixing_p[[2]] * dnorm(sample_pts, mean = mu[[2]], sd = sigma[[2]])
return(val)
}
dens <- 1:4
dens_list <- lapply(dens, dens_f)
dens_df <- data.frame()
for (i in dens) {
dens_df <- rbind(
dens_df,
data.frame(
density = dens_list[[i]],
data = rep(paste("Data", i), length(sample_pts)),
x = sample_pts
)
)
}
dens_df$data <- factor(dens_df$data, levels = paste0("Data ", dens))
dens_df$quantity <- factor("Density")
dens_f <- function(n) {
mixing_p_n <- mixing_p[[n]]
mu_n <- mu[[n]]
val <-
mixing_p_n[[1]] * dnorm(sample_pts, mean = mu_n[[1]], sd = sigma[[1]]) +
mixing_p_n[[2]] * dnorm(sample_pts, mean = mu_n[[2]], sd = sigma[[2]])
return(val)
}
dens <- 1:4
dens_list <- lapply(dens, dens_f)
dens_df <- data.frame()
for (i in dens) {
dens_df <- rbind(
dens_df,
data.frame(
density = dens_list[[i]],
data = rep(paste("Data", i), length(sample_pts)),
x = sample_pts
)
)
}
dens_df$data <- factor(dens_df$data, levels = paste0("Data ", dens))
dens_df$quantity <- factor("Density")
dens_plots <- ggplot(dens_df, aes(x=x,y = density)) +
geom_line() +
xlim(c(-20, 20)) +
facet_grid(
quantity ~ data,
scales = "free_y",
labeller = label_wrap_gen(multi_line=FALSE)
) +
theme_bw() +
theme(text = element_text(size = 20))
dens_plots
model_levels <- c("stan", "jags-full", "jags-marg-inbuilt", "jags-marg",
"jags-full-restricted")
quantity_levels <- c("Time per min Effective Sample", "Computation Time",
"Min Effective Sample Size", "Rhat")
result <- readRDS(here::here("Results","two-component-result.rds"))
result$model <- factor(result$model, levels = model_levels)
result$data <- factor(result$data, levels = as.character(1:4),
labels = paste0("Data ", dens))
result$quantity <- factor(result$quantity, levels = quantity_levels)
result$trial <- factor(result$trial)
result$value <- as.numeric(result$value)
log_plot <- result %>%
filter(quantity != "Rhat") %>%
ggplot(aes(x = model, y = value, group = model)) +
geom_boxplot(color = "black", fill = "steelblue", alpha = 0.5) +
facet_grid(quantity ~ data, scales = "free") +
scale_y_log10(
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))
) +
scale_x_discrete(labels = NULL) +
labs(y = "") +
theme_bw() +
theme(
strip.placement = "outside",
text = element_text(size = 20),
strip.text.x = element_blank(),
axis.title.x = element_blank()
)
log_plot
rhat_plot <- result %>%
filter(quantity == "Rhat") %>%
ggplot(aes(x = model, y = value, group = model)) +
geom_point() +
geom_hline(yintercept = 1.1) +
facet_grid(
quantity ~ data,
scales = "free_y",
labeller = label_wrap_gen(multi_line=FALSE)
) +
scale_x_discrete(labels = addline_format(model_levels)) +
scale_y_continuous(labels = number_format(accuracy = 0.001)) +
theme_bw() +
theme(
strip.placement = "outside",
text = element_text(size=20),
strip.text.x = element_blank()
)
rhat_plot
#pdf("two-component-mixture-log-result.pdf", width = 18, height = 20)
grid.arrange(dens_plots, log_plot, rhat_plot, ncol = 1,
layout_matrix = cbind(c(1, 2, 2, 2, 3)))
#dev.off()
plot <- result %>%
filter(result, quantity != "Rhat") %>%
aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5)
facet_wrap(quantity ~ data, scales = "free_y")
theme_bw()
scale_x_discrete(labels = NULL)
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
)
plot
dens_plots2 <- ggplot(dens_df, aes(x = x, y = density)) +
geom_line() +
facet_wrap(quantity~data, scales='free',ncol=4) +
xlim(c(-20, 20)) +
theme_bw() +
theme(text = element_text(size=20))
dens_plots2
rhat_plot2 <- result %>%
filter(quantity == "Rhat") %>%
ggplot(aes(x = model, y = value, group = model)) +
geom_point() +
geom_hline(yintercept = 1.1)
facet_wrap(quantity ~ data, scales='free', ncol=4)
theme_bw() +
theme(text = element_text(size = 20)) +
scale_x_discrete(labels=addline_format(model_levels))
rhat_plot2 <- result %>%
filter(quantity == "Rhat") %>%
ggplot(aes(x = model, y = value, group = model)) +
geom_point() +
geom_hline(yintercept = 1.1) +
facet_wrap(quantity ~ data, scales='free', ncol=4) +
theme_bw() +
theme(text = element_text(size = 20)) +
scale_x_discrete(labels=addline_format(model_levels))
rhat_plot2
#pdf("two-component-mixture-result.pdf", width = 18, height = 20)
grid.arrange(
dens_plots2 + scale_y_continuous(labels = number_format(accuracy = 0.001),
limits = c(0,0.15)),
plot,
rhat_plot2 + theme(panel.spacing = unit(1, "lines")),
ncol = 1, layout_matrix = cbind(c(1,2,2,2,3)))
plot <- result %>%
filter(result, quantity != "Rhat") %>%
aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5)
facet_wrap(quantity ~ data, scales = "free_y")
theme_bw()
scale_x_discrete(labels = NULL)
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
)
plot
plot <- result %>%
filter(result, quantity != "Rhat") %>%
aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
)
plot
plot <- result %>%
filter(result, quantity != "Rhat") %>%
aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
)
plot
result %>%
filter(result, quantity != "Rhat") %>%
aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
)
result %>%
filter(result, quantity != "Rhat")
result
head(result)
result %>%
filter(result, quantity != "Rhat")
class(result$quantity)
filter(result, quantity != "Rhat")
result %>%
filter(result, quantity != "Rhat")
plot <- filter(result, quantity != "Rhat") %>%
aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
)
plot
filter(result, quantity != "Rhat") %>%
aes(x = model, y = value, group = model)
plot <- result %>%
filter(quantity != "Rhat") %>%
aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
)
plot
result %>%
filter(quantity != "Rhat")
result %>%
filter(quantity != "Rhat") %>%
aes(x = model, y = value, group = model)
plot <- result %>%
filter(quantity != "Rhat") %>%
ggplot(aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
))
ggplot(filter(,result, quantity != "Rhat") ,aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
))
ggplot(filter(result, quantity != "Rhat") ,aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
))
ggplot(subset(result, quantity != "Rhat"), aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
))
ggplot(subset(result, quantity != "Rhat"), aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()))
ggplot(subset(result, quantity != "Rhat"), mapping = aes(x = model, y = value, group = model) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()))
plot <- ggplot(filter(result, quantity != "Rhat") ,aes(x = model, y = value, group = model)) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
)
plot
plot <- ggplot(filter(result, quantity != "Rhat"),
aes(x = model, y = value, group = model)) +
geom_boxplot(color = "black", fill = "gray", alpha = 0.5) +
facet_wrap(quantity ~ data, scales = "free_y") +
theme_bw() +
scale_x_discrete(labels = NULL) +
theme(
strip.placement = "outside",
text = element_text(size=20),
axis.title.x = element_blank()
)
plot
#pdf("two-component-mixture-result.pdf", width = 18, height = 20)
grid.arrange(
dens_plots2 + scale_y_continuous(labels = number_format(accuracy = 0.001),
limits = c(0,0.15)),
plot,
rhat_plot2 + theme(panel.spacing = unit(1, "lines")),
ncol = 1, layout_matrix = cbind(c(1,2,2,2,3)))
#dev.off()
